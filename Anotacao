ORIENTAÇÃO OBJETO:
- Classes;
- Objetos;
- Métodos;
- String;
- Operadores de atribuição;
- Operadores Lógicos;
- Operadores relacionais;

Classes:  Declaração de classe

//public class Usuario :
		
- A palavra-chave é um modificador de acesso. Por enquanto, simplesmente declaramos toda classe public. Cada declaração de classe public deve ser armazenada em um arquivo com o mesmo nome que a classe e terminar com a extensão .java; do contrário, ocorrerá um erro de compilação

- Cada declaração de classe contém a palavra-chave class seguida imediatamente pelo nome da classe, nesse caso, Usuario. Cada corpo de classe é inserido entre um par de chaves esquerda e direita, ou seja, abertura e fechamento {    .....    }

- Nomes de classes, de método e de variável são identificadores e, por convenção, todos usam o mesmo esquema de nomeação com a notação camelo. Também por convenção, os nomes de classe começam com uma letra maiúscula, e os de métodos e de variáveis iniciam com uma letra minúscula

//Variável de instância login :

Um objeto tem atributos, implementados como variáveis de instância que o acompanham ao longo da sua vida. As variáveis de instância existem antes que os métodos sejam chamados em um objeto, enquanto eles são executados e depois que a execução deles foi concluída. Cada objeto (instância) da classe tem sua própria cópia das variáveis de instância da classe. Uma classe normalmente contém um ou mais métodos que manipulam as variáveis de instância pertencentes aos objetos particulares dela. Variáveis de instância são declaradas dentro de uma declaração de classe, mas fora do corpo dos métodos da classe. 

	Veja um exemplo:
		public class Usuario{
			private String login;
			private String senha;
			public void logar(){ .... } 
		}

//Parâmetros :
São variáveis locais que declaramos dentro de um aplicativo no método. Variáveis declaradas no corpo de um método específico (como login) são variáveis locais que somente podem ser utilizadas nele. Cada método só pode acessar suas próprias variáveis locais, não aquelas dos outros. Quando esse método terminar, os valores de suas variáveis locais são perdidos. Os parâmetros de um método também são variáveis locais dele. 
public class Usuario{
private String login;
public void logar(nomeUsuario){

}
public void cadastrar(){

 nomeUsuario = “Pedro”;
}

Objetos:

Como mencionado anteriormente, uma classe fornece os esquemas para objetos. Então, basicamente, um objeto é criado a partir de uma classe. 

Em Java, a new palavra-chave é usada para criar novos objetos. Existem três etapas ao criar um objeto de uma classe:
	 - Declaração - Uma declaração de variável com um nome de variável com um tipo de 	objeto.
	- Instantiation - A palavra-chave 'new' é usada para criar o objeto.
	- Inicialização - A palavra-chave 'new' é seguida por uma chamada para um construtor. 

	Esta chamada inicializa o novo objeto. 

//Instância de um objeto — palavra-chave new e construtores :

Usuario us = new Usuario();

O exemplo acima a variável us é inicializada com o resultado da expressão de criação de instância de classe new Usuario(). A palavra-chave new estabelece um novo objeto da classe especificada — nesse caso, Usuario. Os parênteses à direita de Usuario são necessários. Esses parênteses em combinação com um nome de classe representam uma chamada para um construtor, que é semelhante a um método, mas é chamado implicitamente pelo operador new para inicializar as variáveis de instância de um objeto quando este é criado. Você ainda pode colocar um argumento entre os parênteses para especificar um valor inicial a uma variável de instância

//Construtores

Ao discutir sobre classes, um dos subtópicos mais importantes seria construtores. Toda classe tem um construtor. Se não escrevermos explicitamente um construtor para uma classe, o compilador Java construirá um construtor padrão para essa classe. 
Cada vez que um novo objeto é criado, pelo menos um construtor será invocado.
A principal regra dos construtores é que eles devem ter o mesmo nome da classe. 

Uma classe pode ter mais de um construtor.

Métodos: 

Um método Java é uma coleção de instruções que são agrupadas para executar uma operação. Quando você chama o método System.out.println (), por exemplo, o sistema na verdade executa várias instruções para exibir uma mensagem no console. 
Agora você aprenderá como criar seus próprios métodos com ou sem valores de retorno, invocar um método com ou sem parâmetros e aplicar abstração de método no design do programa. 


public void soma(){
    System.out.println(50+60);
}

public void soma(int x, int y){					
   System.out.println(x+y);
}

public int soma(){                      }>  CHAMADA   }>    soma(); -> Sem Retorno
   return 50+60;						
}							    int rs;
							    rs = soma(30,40) -> Com Retorno
public int soma(int x, int y){
   return x+y;
}

//Elementos que compoe um método:

Modificador - Define o tipo de acesso do método e é opcional para uso. 
Tipo de Retorno - O método pode retornar um valor.
Nome do Método - Esse é o nome do método. 
A assinatura do método consiste no nome do método e na lista de parâmetros.
Lista de Parâmetros - A lista de parâmetros, é o tipo, ordem e número de parâmetros de um método. Estes são opcionais, o método pode conter zero parâmetros.
Corpo do método - O corpo do método define o que o método faz com as instruções. 

public String msgParaUsuario(String nome, int idade){
	return "Olá", "+nome+", você tem "+idade+"anos"; }
Public(Modificador) String(Tipo de retorno) msgParaUsuario(Nome do método) (String nome(Parâmetros), int idade(Argumentos)){
	return "Olá", "+nome+", você tem "+idade+"anos"; (CORPO DO MÉTODO) }
	
Operadores Relacionais:

operadores de igualdade 
== = x é igual a y
!= - x não é igual a y

operadores relacionais:
> = x é maior que y
< = x é menos que y
>= = x é maior ou igual a y
<= = x é menor que ou igual a y

Operadores Scape:

/n = Nova linha. Posiciona o cursos de tela no início da próxima linha
/t = Tabulação horizontal. Move o cursor para a próxima parada de tabulação
/r = Retorno de carro. Posiciona o cursos no início da linha atual

\\ = Barras invertidas. Utilizadas para imprimir um caractere de barra invertida
\"" = Aspas duplas. Utilizadas para imprimir um caractere de aspas duplas. Por exemplo, exibe "entre aspas".

Operadors Aritméticas:

Adição =   +  /   f + 7
Subtração =  -  /  p - c
Multiplicação =  *  /  b * m
Divisão =  /  /  x / y
Resto =  %  /  r % s
